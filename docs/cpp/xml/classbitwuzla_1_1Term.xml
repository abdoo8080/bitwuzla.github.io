<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="classbitwuzla_1_1Term" kind="class" language="C++" prot="public">
    <compoundname>bitwuzla::Term</compoundname>
    <includes refid="bitwuzla_8h" local="no">bitwuzla.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbitwuzla_1_1Term_1a37c6a90c6b916a9520f1132ab9ad2760" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend bitwuzla::Term::Bitwuzla</definition>
        <argsstring></argsstring>
        <name>Bitwuzla</name>
        <qualifiedname>bitwuzla::Term::Bitwuzla</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="376" column="10" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classbitwuzla_1_1Term_1a2a0edd364d8aa235c673b0333a257a52" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; bzla::Node &gt;</type>
        <definition>std::shared_ptr&lt;bzla::Node&gt; bitwuzla::Term::d_node</definition>
        <argsstring></argsstring>
        <name>d_node</name>
        <qualifiedname>bitwuzla::Term::d_node</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The internal node wrapped by this term. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="672" column="19" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a8de65f5a4a827414abc5c29fbcb5ad2b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Term &amp;, const Term &amp;)</argsstring>
        <name>operator==</name>
        <qualifiedname>bitwuzla::Term::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical equality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given terms are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="377" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a04e0a75550fb56757270e65de70a75e8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Term &amp;, const Term &amp;)</argsstring>
        <name>operator!=</name>
        <qualifiedname>bitwuzla::Term::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>a</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>b</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical disequality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given terms are disequal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="378" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a1440e37fcbc934fdae06e33c6b037c54" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, const Term &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::Term::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <defname>out</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>term</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print term to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="379" column="10"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1ae441d3e88ad1ecd0a308f063384bcdbd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_true</definition>
        <argsstring>()</argsstring>
        <name>mk_true</name>
        <qualifiedname>bitwuzla::Term::mk_true</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a true value. <simplesect kind="return"><para>A term representing true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="381" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a8b0b20d1412c60d8ea519ffab7a38ba2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_false</definition>
        <argsstring>()</argsstring>
        <name>mk_false</name>
        <qualifiedname>bitwuzla::Term::mk_false</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a false value. <simplesect kind="return"><para>A term representing false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="382" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a21deaee413784aedfdb0bf050a8d1ff4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_zero</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_bv_zero</name>
        <qualifiedname>bitwuzla::Term::mk_bv_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value 0 of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="383" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a1def1d262a66ec5f01c513d2d8794b4f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_one</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_bv_one</name>
        <qualifiedname>bitwuzla::Term::mk_bv_one</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value 1 of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="384" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a096ea9ab2fe938ac1c3d8ea92fcf547b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_ones</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_bv_ones</name>
        <qualifiedname>bitwuzla::Term::mk_bv_ones</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value where all bits are set to 1. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where all bits are set to 1. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="385" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a52eab4ba74f2b35110100ee56a052bed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_min_signed</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_bv_min_signed</name>
        <qualifiedname>bitwuzla::Term::mk_bv_min_signed</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector minimum signed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where the MSB is set to 1 and all remaining bits are set to 0. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="386" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a256519226f125bd3c4e9dcb4155452a6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_max_signed</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_bv_max_signed</name>
        <qualifiedname>bitwuzla::Term::mk_bv_max_signed</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector maximum signed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where the MSB is set to 0 and all remaining bits are set to 1. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="387" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a1e8974e78a8353987c2289bfc7921410" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_value</definition>
        <argsstring>(const Sort &amp;, const std::string &amp;, uint8_t)</argsstring>
        <name>mk_bv_value</name>
        <qualifiedname>bitwuzla::Term::mk_bv_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>value</defname>
        </param>
        <param>
          <type>uint8_t</type>
          <defname>base</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its string representation.</para>
<para>Parameter <computeroutput>base</computeroutput> determines the base of the string representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base in which the string is given; <computeroutput>2</computeroutput> for binary, <computeroutput>10</computeroutput> for decimal, and <computeroutput>16</computeroutput> for hexadecimal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="388" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a7e0b05d9ebcd48372423181169909e1e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_value_uint64</definition>
        <argsstring>(const Sort &amp;, uint64_t)</argsstring>
        <name>mk_bv_value_uint64</name>
        <qualifiedname>bitwuzla::Term::mk_bv_value_uint64</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>uint64_t</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its unsigned integer representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsigned integer representation of the bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="389" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a62f3065dfb1ef050261da9915e2be8ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_bv_value_int64</definition>
        <argsstring>(const Sort &amp;, int64_t)</argsstring>
        <name>mk_bv_value_int64</name>
        <qualifiedname>bitwuzla::Term::mk_bv_value_int64</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>int64_t</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its signed integer representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsigned integer representation of the bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="390" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a999ef3ce6c86e7b796ea13c3bd7f4b52" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_pos_zero</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_fp_pos_zero</name>
        <qualifiedname>bitwuzla::Term::mk_fp_pos_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point positive zero value (SMT-LIB: <computeroutput>+zero</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point positive zero value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="391" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a7d6fd157d189b282e6d26e82315cc82c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_neg_zero</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_fp_neg_zero</name>
        <qualifiedname>bitwuzla::Term::mk_fp_neg_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point negative zero value (SMT-LIB: <computeroutput>-zero</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point negative zero value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="392" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a0ea70d64b0b879a6dbe98b0d353255ad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_pos_inf</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_fp_pos_inf</name>
        <qualifiedname>bitwuzla::Term::mk_fp_pos_inf</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point positive infinity value (SMT-LIB: <computeroutput>+oo</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point positive infinity value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="393" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a96d63c3991034eddd8d85af94839d969" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_neg_inf</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_fp_neg_inf</name>
        <qualifiedname>bitwuzla::Term::mk_fp_neg_inf</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point negative infinity value (SMT-LIB: <computeroutput>-oo</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point negative infinity value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="394" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1aaa3b3c93aeb9b3ee6ae6a28bc9fee134" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_nan</definition>
        <argsstring>(const Sort &amp;)</argsstring>
        <name>mk_fp_nan</name>
        <qualifiedname>bitwuzla::Term::mk_fp_nan</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point NaN value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point NaN value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="395" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1aa22f9f647a8e17c3d2b96071c6b1cf45" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_value</definition>
        <argsstring>(const Term &amp;, const Term &amp;, const Term &amp;)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::Term::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>bv_sign</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>bv_exponent</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>bv_significand</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its IEEE 754 standard representation given as three bit-vector values representing the sign bit, the exponent and the significand.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bv_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The sign bit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bv_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent bit-vector value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bv_significand</parametername>
</parameternamelist>
<parameterdescription>
<para>The significand bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the floating-point value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="396" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1ad5816c18a3c2849a80fb8975bebb788b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_value</definition>
        <argsstring>(const Sort &amp;, const Term &amp;, const std::string &amp;)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::Term::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>rm</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>real</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its real representation, given as a decimal string, with respect to given rounding mode.</para>
<para><simplesect kind="note"><para>Given rounding mode may be an arbitrary, non-value rounding mode term. If it is a value, the returned term will be a floating-point value, else a non-value floating-point term.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing a real value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating-point representation of the given real string. If <computeroutput>rm</computeroutput> is of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref> the floating-point will be of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, else it will be a non-value term.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="397" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1ab53b48c74a6f31dda077c6ff13537d48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_fp_value</definition>
        <argsstring>(const Sort &amp;, const Term &amp;, const std::string &amp;, const std::string &amp;)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::Term::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>rm</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>num</defname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <defname>den</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its rational representation, given as a two decimal strings representing the numerator and denominator, with respect to given rounding mode.</para>
<para><simplesect kind="note"><para>Given rounding mode may be an arbitrary, non-value rounding mode term. If it is a value, the returned term will be a floating-point value, else a non-value floating-point term.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing the numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>den</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing the denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating-point representation of the given rational string. If <computeroutput>rm</computeroutput> is of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref> the floating-point will be of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, else it will be a non-value term.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="398" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a20c6617515e65e6afcd1a3bdcbeae1a9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_rm_value</definition>
        <argsstring>(RoundingMode)</argsstring>
        <name>mk_rm_value</name>
        <qualifiedname>bitwuzla::Term::mk_rm_value</qualifiedname>
        <param>
          <type><ref refid="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" kindref="member">RoundingMode</ref></type>
          <defname>rm</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a rounding mode value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the rounding mode value.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" kindref="member">RoundingMode</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="402" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a5a493568380595a43a6573fd5b6f4ba5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_const_array</definition>
        <argsstring>(const Sort &amp;, const Term &amp;)</argsstring>
        <name>mk_const_array</name>
        <qualifiedname>bitwuzla::Term::mk_const_array</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>term</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a one-dimensional constant array of given sort, initialized with given value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The term to initialize the elements of the array with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca0a0d89e2802bf5614a9e6e3531c563a6" kindref="member">Kind::CONST_ARRAY</ref>, representing a constant array of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacb1c94b05a3181ab3797461db1e0101c" kindref="member">mk_array_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="403" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a0cd6124cb9f917bb8b6aa267c261546d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_term</definition>
        <argsstring>(Kind, const std::vector&lt; Term &gt; &amp;, const std::vector&lt; uint64_t &gt; &amp;)</argsstring>
        <name>mk_term</name>
        <qualifiedname>bitwuzla::Term::mk_term</qualifiedname>
        <param>
          <type><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></type>
          <defname>kind</defname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt; &amp;</type>
          <defname>args</defname>
        </param>
        <param>
          <type>const std::vector&lt; uint64_t &gt; &amp;</type>
          <defname>indices</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a term of given kind with the given argument terms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator kind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of this term, empty if not indexed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing an operation of given kind.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="404" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1acbb09fc10eba2a8d26edaa22f606fb25" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_const</definition>
        <argsstring>(const Sort &amp;, std::optional&lt; const std::string &gt;)</argsstring>
        <name>mk_const</name>
        <qualifiedname>bitwuzla::Term::mk_const</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>std::optional&lt; const std::string &gt;</type>
          <defname>symbol</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a (first-order) constant of given sort with given symbol.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the constant. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the constant.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca8d6b5cada83510220f59e00ce86d4d92" kindref="member">Kind::CONSTANT</ref>, representing the constant.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacb1c94b05a3181ab3797461db1e0101c" kindref="member">mk_array_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga7bcc9c149fc0adfa1adb1ff4628fae0b" kindref="member">mk_bool_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacccceb1252cbd32e2bb1600de5651b12" kindref="member">mk_fun_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga86aa84200669f4ea6101efce53653b55" kindref="member">mk_rm_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="407" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1ade2e98bd3bb00199cfcfc43b207fca8c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term mk_var</definition>
        <argsstring>(const Sort &amp;, std::optional&lt; const std::string &gt;)</argsstring>
        <name>mk_var</name>
        <qualifiedname>bitwuzla::Term::mk_var</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <defname>sort</defname>
        </param>
        <param>
          <type>std::optional&lt; const std::string &gt;</type>
          <defname>symbol</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a variable of given sort with given symbol.</para>
<para><simplesect kind="note"><para>This creates a variable to be bound by quantifiers or lambdas.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae61ad9b2553a293b4a3f4d3b4fa5ab31" kindref="member">Kind::VARIABLE</ref>, representing the variable.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga7bcc9c149fc0adfa1adb1ff4628fae0b" kindref="member">mk_bool_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacccceb1252cbd32e2bb1600de5651b12" kindref="member">mk_fun_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga86aa84200669f4ea6101efce53653b55" kindref="member">mk_rm_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="408" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1af65a9d8df41460123e37573c1427983c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term substitute_term</definition>
        <argsstring>(const Term &amp;, const std::unordered_map&lt; Term, Term &gt;)</argsstring>
        <name>substitute_term</name>
        <qualifiedname>bitwuzla::Term::substitute_term</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <defname>term</defname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref>, <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt;</type>
          <defname>map</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitute a set of keys with their corresponding values in the given term.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The term in which the keys are to be substituted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The substitution map. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting term from this substitution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="409" column="15"/>
      </memberdef>
      <memberdef kind="friend" id="classbitwuzla_1_1Term_1a08b9c92446fa84f5f7cb8c649502b87b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void substitute_terms</definition>
        <argsstring>(std::vector&lt; Term &gt; &amp;terms, const std::unordered_map&lt; Term, Term &gt; map)</argsstring>
        <name>substitute_terms</name>
        <qualifiedname>bitwuzla::Term::substitute_terms</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt; &amp;</type>
          <declname>terms</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref>, <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitute a set of keys with their corresponding values in the set of given terms.</para>
<para>The terms in <computeroutput>terms</computeroutput> are replaced with the terms resulting from this substitutions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terms_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the set of terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terms</parametername>
</parameternamelist>
<parameterdescription>
<para>The terms in which the keys are to be substituted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the substitution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The keys. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_values</parametername>
</parameternamelist>
<parameterdescription>
<para>The mapped values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="411" column="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbitwuzla_1_1Term_1acb95c3418ad050fca28c99a0f08ba63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>bitwuzla::Term::Term</definition>
        <argsstring>()</argsstring>
        <name>Term</name>
        <qualifiedname>bitwuzla::Term::Term</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor, creates null term. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="416" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ac1b4d307cddde5e482460ceb084a3dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>bitwuzla::Term::~Term</definition>
        <argsstring>()</argsstring>
        <name>~Term</name>
        <qualifiedname>bitwuzla::Term::~Term</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="418" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1afaf26eea578787e39e3411236ee95809" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <qualifiedname>bitwuzla::Term::is_null</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a null term. <simplesect kind="return"><para>True if this term is a null term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="424" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a153d08665babc1ed054459f0201bfc5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t bitwuzla::Term::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <qualifiedname>bitwuzla::Term::id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the id of this term. <simplesect kind="return"><para>The term id. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="430" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a9e025f951bd902e24d3471f535a80ad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></type>
        <definition>Kind bitwuzla::Term::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <qualifiedname>bitwuzla::Term::kind</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the kind of this term. <simplesect kind="return"><para>The kind. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="436" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a36bb9533301c9fb3f128a4e8c025cc39" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::Term::sort</definition>
        <argsstring>() const</argsstring>
        <name>sort</name>
        <qualifiedname>bitwuzla::Term::sort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sort of this term. <simplesect kind="return"><para>The sort of the term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="442" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1aaf4934ff99b2b26bb19e0fe74da0ab22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bitwuzla::Term::num_children</definition>
        <argsstring>() const</argsstring>
        <name>num_children</name>
        <qualifiedname>bitwuzla::Term::num_children</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of child terms of this term. <simplesect kind="return"><para>The number of children of this term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="448" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a5fe59628cf4cd89ee9c34fa92f02befe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt;</type>
        <definition>std::vector&lt; Term &gt; bitwuzla::Term::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <qualifiedname>bitwuzla::Term::children</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the child terms of this term. <simplesect kind="return"><para>The children of this term as a vector of terms. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="454" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a3fca4c89b479f1178f07a1734bf55c86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::Term::operator[]</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>bitwuzla::Term::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get child at position <computeroutput>index</computeroutput>.</para>
<para><simplesect kind="note"><para>Only valid to call if <ref refid="classbitwuzla_1_1Term_1aaf4934ff99b2b26bb19e0fe74da0ab22" kindref="member">num_children()</ref> &gt; 0.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The position of the child. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The child node at position <computeroutput>index</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="464" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a5ef9334042d6d248511bb6c50c30e0c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t bitwuzla::Term::num_indices</definition>
        <argsstring>() const</argsstring>
        <name>num_indices</name>
        <qualifiedname>bitwuzla::Term::num_indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of indices of this term. <simplesect kind="return"><para>The number of indices of this term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="470" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a6903aa60da830c6697a7d252b389a9ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint64_t &gt;</type>
        <definition>std::vector&lt; uint64_t &gt; bitwuzla::Term::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <qualifiedname>bitwuzla::Term::indices</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the indices of an indexed term.</para>
<para>Requires that given term is an indexed term.</para>
<para><simplesect kind="return"><para>The indices of this term as a vector of indices. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="479" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ac793a99dfc2394fe3b60afc8f354d4e2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::reference_wrapper&lt; const std::string &gt; &gt;</type>
        <definition>std::optional&lt; std::reference_wrapper&lt; const std::string &gt; &gt; bitwuzla::Term::symbol</definition>
        <argsstring>() const</argsstring>
        <name>symbol</name>
        <qualifiedname>bitwuzla::Term::symbol</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the symbol of this term. <simplesect kind="return"><para>The symbol of this term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="485" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ab5144803c259fe4121bf609d9d50dc2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_const</definition>
        <argsstring>() const</argsstring>
        <name>is_const</name>
        <qualifiedname>bitwuzla::Term::is_const</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a constant. <simplesect kind="return"><para>True if this term is a constant. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="500" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a0f047d2d11e06438220b8d69974353a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_variable</definition>
        <argsstring>() const</argsstring>
        <name>is_variable</name>
        <qualifiedname>bitwuzla::Term::is_variable</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a variable. <simplesect kind="return"><para>True if this term is a variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="506" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a5a94a4e1e77958b7468b9698a948e677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_value</definition>
        <argsstring>() const</argsstring>
        <name>is_value</name>
        <qualifiedname>bitwuzla::Term::is_value</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a value. <simplesect kind="return"><para>True if this term is a value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="512" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ab8ee5f2aa273126fc54922a5ef958825" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_true</definition>
        <argsstring>() const</argsstring>
        <name>is_true</name>
        <qualifiedname>bitwuzla::Term::is_true</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is Boolean value true. <simplesect kind="return"><para>True if this term is Boolean value true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="518" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1af026be94e982b79f5e6af3ed3931b59d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_false</definition>
        <argsstring>() const</argsstring>
        <name>is_false</name>
        <qualifiedname>bitwuzla::Term::is_false</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is Boolean value false. <simplesect kind="return"><para>True if this term is Boolean value false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="524" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a3d59d0462975349585cb996ce12a7f58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_bv_value_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_bv_value_zero</name>
        <qualifiedname>bitwuzla::Term::is_bv_value_zero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a bit-vector value representing zero. <simplesect kind="return"><para>True if this term is a bit-vector zero value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="530" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a7cf34a4d441bca9b2902a0b376867ed6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_bv_value_one</definition>
        <argsstring>() const</argsstring>
        <name>is_bv_value_one</name>
        <qualifiedname>bitwuzla::Term::is_bv_value_one</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a bit-vector value representing one. <simplesect kind="return"><para>True if this term is a bit-vector one value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="536" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a6a5b581016e34d52e57c73fa8f4c04dd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_bv_value_ones</definition>
        <argsstring>() const</argsstring>
        <name>is_bv_value_ones</name>
        <qualifiedname>bitwuzla::Term::is_bv_value_ones</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a bit-vector value with all bits set to one. <simplesect kind="return"><para>True if this term is a bit-vector value with all bits set to one. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="542" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a4b7249922ad2c6bda9ff05fe717c7734" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_bv_value_min_signed</definition>
        <argsstring>() const</argsstring>
        <name>is_bv_value_min_signed</name>
        <qualifiedname>bitwuzla::Term::is_bv_value_min_signed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a bit-vector minimum signed value. <simplesect kind="return"><para>True if this term is a bit-vector value with the most significant bit set to 1 and all other bits set to 0. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="549" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a65e28c9146fdea9fecc6759e386abf04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_bv_value_max_signed</definition>
        <argsstring>() const</argsstring>
        <name>is_bv_value_max_signed</name>
        <qualifiedname>bitwuzla::Term::is_bv_value_max_signed</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a bit-vector maximum signed value. <simplesect kind="return"><para>True if this term is a bit-vector value with the most significant bit set to 0 and all other bits set to 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="556" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a6ff1dc9ad3339b5422b8db33e6218098" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_fp_value_pos_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_fp_value_pos_zero</name>
        <qualifiedname>bitwuzla::Term::is_fp_value_pos_zero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a floating-point positive zero (<computeroutput>+zero</computeroutput>) value. <simplesect kind="return"><para>True if this term is a floating-point +zero value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="562" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a84af0fb4685c271c03ee99dcd8fc99a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_fp_value_neg_zero</definition>
        <argsstring>() const</argsstring>
        <name>is_fp_value_neg_zero</name>
        <qualifiedname>bitwuzla::Term::is_fp_value_neg_zero</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a floating-point value negative zero (<computeroutput>-zero</computeroutput>). <simplesect kind="return"><para>True if this term is a floating-point value negative zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="568" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a04b101cf4b8cae29cec027e8c76171d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_fp_value_pos_inf</definition>
        <argsstring>() const</argsstring>
        <name>is_fp_value_pos_inf</name>
        <qualifiedname>bitwuzla::Term::is_fp_value_pos_inf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a floating-point positive infinity (<computeroutput>+oo</computeroutput>) value. <simplesect kind="return"><para>True if this term is a floating-point +oo value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="574" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ad70b1f809a4d652c5cf6585926049d15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_fp_value_neg_inf</definition>
        <argsstring>() const</argsstring>
        <name>is_fp_value_neg_inf</name>
        <qualifiedname>bitwuzla::Term::is_fp_value_neg_inf</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a floating-point negative infinity (-oo) value. <simplesect kind="return"><para>True if this term is a floating-point -oo value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="580" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a0a041aaa3188c88305ab95a65ff642bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_fp_value_nan</definition>
        <argsstring>() const</argsstring>
        <name>is_fp_value_nan</name>
        <qualifiedname>bitwuzla::Term::is_fp_value_nan</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a floating-point NaN value. <simplesect kind="return"><para>True if this term is a floating-point NaN value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="586" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a10b8a165b62ecdc6aed4104bce5059ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_rm_value_rna</definition>
        <argsstring>() const</argsstring>
        <name>is_rm_value_rna</name>
        <qualifiedname>bitwuzla::Term::is_rm_value_rna</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a rounding mode RNA value. <simplesect kind="return"><para>True if this term is a roundindg mode RNA value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="592" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a4a655521f1417bf0dbaba683213cdc1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_rm_value_rne</definition>
        <argsstring>() const</argsstring>
        <name>is_rm_value_rne</name>
        <qualifiedname>bitwuzla::Term::is_rm_value_rne</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a rounding mode RNE value. <simplesect kind="return"><para>True if this term is a rounding mode RNE value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="598" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ae03a18339cd08501e88f64dc8343e7d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_rm_value_rtn</definition>
        <argsstring>() const</argsstring>
        <name>is_rm_value_rtn</name>
        <qualifiedname>bitwuzla::Term::is_rm_value_rtn</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a rounding mode RTN value. <simplesect kind="return"><para>True if this term is a rounding mode RTN value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="604" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a5620394b7db2937fd90d5d2eff0557b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_rm_value_rtp</definition>
        <argsstring>() const</argsstring>
        <name>is_rm_value_rtp</name>
        <qualifiedname>bitwuzla::Term::is_rm_value_rtp</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a rounding mode RTP value. <simplesect kind="return"><para>True if this term is a rounding mode RTP value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="610" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a9f9974bb0a1fc706c5685cefa4fe9930" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::Term::is_rm_value_rtz</definition>
        <argsstring>() const</argsstring>
        <name>is_rm_value_rtz</name>
        <qualifiedname>bitwuzla::Term::is_rm_value_rtz</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine if this term is a rounding mode RTZ value. <simplesect kind="return"><para>True if this term is a rounding mode RTZ value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="616" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a2ef2c9f31cacc9565177560c1f0b9474" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string bitwuzla::Term::str</definition>
        <argsstring>() const</argsstring>
        <name>str</name>
        <qualifiedname>bitwuzla::Term::str</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the SMT-LIB v2 string representation of this term. <simplesect kind="return"><para>A string representation of this term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="622" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1ab2a1ddd0efa2f2f339573061a931780a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T bitwuzla::Term::value</definition>
        <argsstring>(uint8_t base=2) const</argsstring>
        <name>value</name>
        <qualifiedname>bitwuzla::Term::value</qualifiedname>
        <param>
          <type>uint8_t</type>
          <declname>base</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value from value term.</para>
<para>This function is instantiated for types<itemizedlist>
<listitem><para><computeroutput>bool</computeroutput> for Boolean values</para>
</listitem><listitem><para><computeroutput>RoundingMode</computeroutput> for rounding mode values</para>
</listitem><listitem><para><computeroutput>std::string</computeroutput> for any value (Boolean, RoundingMode, bit-vector and floating-point)</para>
</listitem><listitem><para><computeroutput>std::tuple&lt;std::string, std::string, std::string&gt;</computeroutput> for floating-point values</para>
</listitem></itemizedlist>
</para>
<para>In case of string representations of values (the <computeroutput>std::string</computeroutput> and <computeroutput>std::tuple&lt;std::string, std::string, std::string&gt;</computeroutput> instantions of this function), this returns the raw value string (as opposed to <ref refid="classbitwuzla_1_1Term_1a2ef2c9f31cacc9565177560c1f0b9474" kindref="member">str()</ref>, which returns the SMT-LIB v2 representation of a term). For example, this function returns &quot;010&quot; for a bit-vector value 2 of size 3, while <ref refid="classbitwuzla_1_1Term_1a2ef2c9f31cacc9565177560c1f0b9474" kindref="member">str()</ref> returns &quot;#b010&quot;.</para>
<para><simplesect kind="note"><para>For the general <computeroutput>std::string</computeroutput> instantiation case, the returned string for floating-point values is always the binary IEEE-754 representation of the value (parameter <computeroutput>base</computeroutput> is ignored). Parameter <computeroutput>base</computeroutput> always configures the numeric base for bit-vector values, and for floating-point values in case of the tuple of strings instantiation. It is always ignored for Boolean and RoundingMode values.</para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the value representation. <computeroutput>bool</computeroutput> for Boolean values; <computeroutput>RoundingMode</computeroutput> for rounding mode values; <computeroutput>std::tuple&lt;std::string, std::string, std::string&gt;</computeroutput> for floating-point values (IEEE-754 representation as strings for sign bit, exponent and significand); and, generally, <computeroutput>std::string</computeroutput> for any value type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The numeric base for bit-vector values; <computeroutput>2</computeroutput> for binary, <computeroutput>10</computeroutput> for decimal, and <computeroutput>16</computeroutput> for hexadecimal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="660" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a5bb3119831e0a4d1b18416e85d7e80e2" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; bzla::Node &gt;</type>
        <definition>static std::vector&lt; bzla::Node &gt; bitwuzla::Term::term_vector_to_nodes</definition>
        <argsstring>(const std::vector&lt; Term &gt; &amp;terms)</argsstring>
        <name>term_vector_to_nodes</name>
        <qualifiedname>bitwuzla::Term::term_vector_to_nodes</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt; &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert vector of terms to internal nodes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="664" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a513a4d981fc174237f1b3415c6513d9c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">bitwuzla::Term</ref> &gt;</type>
        <definition>static std::vector&lt; bitwuzla::Term &gt; bitwuzla::Term::node_vector_to_terms</definition>
        <argsstring>(const std::vector&lt; bzla::Node &gt; &amp;nodes)</argsstring>
        <name>node_vector_to_terms</name>
        <qualifiedname>bitwuzla::Term::node_vector_to_terms</qualifiedname>
        <param>
          <type>const std::vector&lt; bzla::Node &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert vector of internal nodes to terms. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="667" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classbitwuzla_1_1Term_1a65821b7b7336f3cc94c165e8daac8d26" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>bitwuzla::Term::Term</definition>
        <argsstring>(const bzla::Node &amp;node)</argsstring>
        <name>Term</name>
        <qualifiedname>bitwuzla::Term::Term</qualifiedname>
        <param>
          <type>const bzla::Node &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor from internal node. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="670" column="3"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="374" column="1" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" bodystart="375" bodyend="673"/>
    <listofallmembers>
      <member refid="classbitwuzla_1_1Term_1a37c6a90c6b916a9520f1132ab9ad2760" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>Bitwuzla</name></member>
      <member refid="classbitwuzla_1_1Term_1a5fe59628cf4cd89ee9c34fa92f02befe" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>children</name></member>
      <member refid="classbitwuzla_1_1Term_1a2a0edd364d8aa235c673b0333a257a52" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>d_node</name></member>
      <member refid="classbitwuzla_1_1Term_1a153d08665babc1ed054459f0201bfc5b" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>id</name></member>
      <member refid="classbitwuzla_1_1Term_1a6903aa60da830c6697a7d252b389a9ac" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>indices</name></member>
      <member refid="classbitwuzla_1_1Term_1a65e28c9146fdea9fecc6759e386abf04" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_bv_value_max_signed</name></member>
      <member refid="classbitwuzla_1_1Term_1a4b7249922ad2c6bda9ff05fe717c7734" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_bv_value_min_signed</name></member>
      <member refid="classbitwuzla_1_1Term_1a7cf34a4d441bca9b2902a0b376867ed6" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_bv_value_one</name></member>
      <member refid="classbitwuzla_1_1Term_1a6a5b581016e34d52e57c73fa8f4c04dd" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_bv_value_ones</name></member>
      <member refid="classbitwuzla_1_1Term_1a3d59d0462975349585cb996ce12a7f58" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_bv_value_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1ab5144803c259fe4121bf609d9d50dc2a" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_const</name></member>
      <member refid="classbitwuzla_1_1Term_1af026be94e982b79f5e6af3ed3931b59d" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_false</name></member>
      <member refid="classbitwuzla_1_1Term_1a0a041aaa3188c88305ab95a65ff642bd" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_fp_value_nan</name></member>
      <member refid="classbitwuzla_1_1Term_1ad70b1f809a4d652c5cf6585926049d15" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_fp_value_neg_inf</name></member>
      <member refid="classbitwuzla_1_1Term_1a84af0fb4685c271c03ee99dcd8fc99a2" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_fp_value_neg_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1a04b101cf4b8cae29cec027e8c76171d9" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_fp_value_pos_inf</name></member>
      <member refid="classbitwuzla_1_1Term_1a6ff1dc9ad3339b5422b8db33e6218098" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_fp_value_pos_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1afaf26eea578787e39e3411236ee95809" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_null</name></member>
      <member refid="classbitwuzla_1_1Term_1a10b8a165b62ecdc6aed4104bce5059ad" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_rm_value_rna</name></member>
      <member refid="classbitwuzla_1_1Term_1a4a655521f1417bf0dbaba683213cdc1b" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_rm_value_rne</name></member>
      <member refid="classbitwuzla_1_1Term_1ae03a18339cd08501e88f64dc8343e7d8" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_rm_value_rtn</name></member>
      <member refid="classbitwuzla_1_1Term_1a5620394b7db2937fd90d5d2eff0557b4" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_rm_value_rtp</name></member>
      <member refid="classbitwuzla_1_1Term_1a9f9974bb0a1fc706c5685cefa4fe9930" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_rm_value_rtz</name></member>
      <member refid="classbitwuzla_1_1Term_1ab8ee5f2aa273126fc54922a5ef958825" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_true</name></member>
      <member refid="classbitwuzla_1_1Term_1a5a94a4e1e77958b7468b9698a948e677" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_value</name></member>
      <member refid="classbitwuzla_1_1Term_1a0f047d2d11e06438220b8d69974353a0" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>is_variable</name></member>
      <member refid="classbitwuzla_1_1Term_1a9e025f951bd902e24d3471f535a80ad8" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>kind</name></member>
      <member refid="classbitwuzla_1_1Term_1a256519226f125bd3c4e9dcb4155452a6" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_max_signed</name></member>
      <member refid="classbitwuzla_1_1Term_1a52eab4ba74f2b35110100ee56a052bed" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_min_signed</name></member>
      <member refid="classbitwuzla_1_1Term_1a1def1d262a66ec5f01c513d2d8794b4f" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_one</name></member>
      <member refid="classbitwuzla_1_1Term_1a096ea9ab2fe938ac1c3d8ea92fcf547b" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_ones</name></member>
      <member refid="classbitwuzla_1_1Term_1a1e8974e78a8353987c2289bfc7921410" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_value</name></member>
      <member refid="classbitwuzla_1_1Term_1a62f3065dfb1ef050261da9915e2be8ac" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_value_int64</name></member>
      <member refid="classbitwuzla_1_1Term_1a7e0b05d9ebcd48372423181169909e1e" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_value_uint64</name></member>
      <member refid="classbitwuzla_1_1Term_1a21deaee413784aedfdb0bf050a8d1ff4" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_bv_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1acbb09fc10eba2a8d26edaa22f606fb25" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_const</name></member>
      <member refid="classbitwuzla_1_1Term_1a5a493568380595a43a6573fd5b6f4ba5" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_const_array</name></member>
      <member refid="classbitwuzla_1_1Term_1a8b0b20d1412c60d8ea519ffab7a38ba2" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_false</name></member>
      <member refid="classbitwuzla_1_1Term_1aaa3b3c93aeb9b3ee6ae6a28bc9fee134" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_nan</name></member>
      <member refid="classbitwuzla_1_1Term_1a96d63c3991034eddd8d85af94839d969" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_neg_inf</name></member>
      <member refid="classbitwuzla_1_1Term_1a7d6fd157d189b282e6d26e82315cc82c" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_neg_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1a0ea70d64b0b879a6dbe98b0d353255ad" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_pos_inf</name></member>
      <member refid="classbitwuzla_1_1Term_1a999ef3ce6c86e7b796ea13c3bd7f4b52" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_pos_zero</name></member>
      <member refid="classbitwuzla_1_1Term_1aa22f9f647a8e17c3d2b96071c6b1cf45" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_value</name></member>
      <member refid="classbitwuzla_1_1Term_1ad5816c18a3c2849a80fb8975bebb788b" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_value</name></member>
      <member refid="classbitwuzla_1_1Term_1ab53b48c74a6f31dda077c6ff13537d48" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_fp_value</name></member>
      <member refid="classbitwuzla_1_1Term_1a20c6617515e65e6afcd1a3bdcbeae1a9" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_rm_value</name></member>
      <member refid="classbitwuzla_1_1Term_1a0cd6124cb9f917bb8b6aa267c261546d" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_term</name></member>
      <member refid="classbitwuzla_1_1Term_1ae441d3e88ad1ecd0a308f063384bcdbd" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_true</name></member>
      <member refid="classbitwuzla_1_1Term_1ade2e98bd3bb00199cfcfc43b207fca8c" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>mk_var</name></member>
      <member refid="classbitwuzla_1_1Term_1a513a4d981fc174237f1b3415c6513d9c" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>node_vector_to_terms</name></member>
      <member refid="classbitwuzla_1_1Term_1aaf4934ff99b2b26bb19e0fe74da0ab22" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>num_children</name></member>
      <member refid="classbitwuzla_1_1Term_1a5ef9334042d6d248511bb6c50c30e0c8" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>num_indices</name></member>
      <member refid="classbitwuzla_1_1Term_1a04e0a75550fb56757270e65de70a75e8" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>operator!=</name></member>
      <member refid="classbitwuzla_1_1Term_1a1440e37fcbc934fdae06e33c6b037c54" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>operator&lt;&lt;</name></member>
      <member refid="classbitwuzla_1_1Term_1a8de65f5a4a827414abc5c29fbcb5ad2b" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>operator==</name></member>
      <member refid="classbitwuzla_1_1Term_1a3fca4c89b479f1178f07a1734bf55c86" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>operator[]</name></member>
      <member refid="classbitwuzla_1_1Term_1a36bb9533301c9fb3f128a4e8c025cc39" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>sort</name></member>
      <member refid="classbitwuzla_1_1Term_1a2ef2c9f31cacc9565177560c1f0b9474" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>str</name></member>
      <member refid="classbitwuzla_1_1Term_1af65a9d8df41460123e37573c1427983c" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>substitute_term</name></member>
      <member refid="classbitwuzla_1_1Term_1a08b9c92446fa84f5f7cb8c649502b87b" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>substitute_terms</name></member>
      <member refid="classbitwuzla_1_1Term_1ac793a99dfc2394fe3b60afc8f354d4e2" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>symbol</name></member>
      <member refid="classbitwuzla_1_1Term_1acb95c3418ad050fca28c99a0f08ba63f" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>Term</name></member>
      <member refid="classbitwuzla_1_1Term_1a65821b7b7336f3cc94c165e8daac8d26" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>Term</name></member>
      <member refid="classbitwuzla_1_1Term_1a5bb3119831e0a4d1b18416e85d7e80e2" prot="private" virt="non-virtual"><scope>bitwuzla::Term</scope><name>term_vector_to_nodes</name></member>
      <member refid="classbitwuzla_1_1Term_1ab2a1ddd0efa2f2f339573061a931780a" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>value</name></member>
      <member refid="classbitwuzla_1_1Term_1ac1b4d307cddde5e482460ceb084a3dd9" prot="public" virt="non-virtual"><scope>bitwuzla::Term</scope><name>~Term</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
