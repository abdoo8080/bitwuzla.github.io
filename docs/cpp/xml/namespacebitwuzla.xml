<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="namespacebitwuzla" kind="namespace" language="C++">
    <compoundname>bitwuzla</compoundname>
    <innerclass refid="classbitwuzla_1_1Bitwuzla" prot="public">bitwuzla::Bitwuzla</innerclass>
    <innerclass refid="classbitwuzla_1_1Exception" prot="public">bitwuzla::Exception</innerclass>
    <innerclass refid="structbitwuzla_1_1OptionInfo" prot="public">bitwuzla::OptionInfo</innerclass>
    <innerclass refid="classbitwuzla_1_1Options" prot="public">bitwuzla::Options</innerclass>
    <innerclass refid="classbitwuzla_1_1Sort" prot="public">bitwuzla::Sort</innerclass>
    <innerclass refid="classbitwuzla_1_1Term" prot="public">bitwuzla::Term</innerclass>
    <innerclass refid="classbitwuzla_1_1Terminator" prot="public">bitwuzla::Terminator</innerclass>
    <innernamespace refid="namespacebitwuzla_1_1parser">bitwuzla::parser</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacebitwuzla_1a018bfacb13e4ee2c0d26e1804a404afa" prot="public" static="no" strong="yes">
        <type></type>
        <name>Result</name>
        <qualifiedname>bitwuzla::Result</qualifiedname>
        <enumvalue id="namespacebitwuzla_1a018bfacb13e4ee2c0d26e1804a404afaa684e1388a91900480c702ac5b8f6b4d8" prot="public">
          <name>SAT</name>
          <initializer>= 10</initializer>
          <briefdescription>
<para>sat </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a018bfacb13e4ee2c0d26e1804a404afaa58516af515d5eb19e854c0a1b580c421" prot="public">
          <name>UNSAT</name>
          <initializer>= 20</initializer>
          <briefdescription>
<para>unsat </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a018bfacb13e4ee2c0d26e1804a404afaa696b031073e74bf2cb98e5ef201d4aa3" prot="public">
          <name>UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>unknown </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A satisfiability result. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" line="34" column="1" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="enum" id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" prot="public" static="no" strong="yes">
        <type></type>
        <name>RoundingMode</name>
        <qualifiedname>bitwuzla::RoundingMode</qualifiedname>
        <enumvalue id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9eabbbffe540e9df36d8c8f847b529e3282" prot="public">
          <name>RNE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Round to the nearest even number. If the two nearest floating-point numbers bracketing an unrepresentable infinitely precise result are equally near, the one with an even least significant digit will be delivered.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>RNE</computeroutput> <computeroutput>roundNearestTiesToEven</computeroutput> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9ea78c4454135cafc53f3fc50daf7213847" prot="public">
          <name>RNA</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Round to the nearest number away from zero. If the two nearest floating-point numbers bracketing an unrepresentable infinitely precise result are equally near, the one with larger magnitude will be selected.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>RNA</computeroutput> <computeroutput>roundNearestTiesToAway</computeroutput> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9eadf5532b153d76557a19431440ebb8312" prot="public">
          <name>RTN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Round towards negative infinity (-oo). The result shall be the format’s floating-point number (possibly -oo) closest to and no less than the infinitely precise result.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>RTN</computeroutput> <computeroutput>roundTowardNegative</computeroutput> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9eaf82a692bd388b13723eef7a7f0fba8f5" prot="public">
          <name>RTP</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Round towards positive infinity (+oo). The result shall be the format’s floating-point number (possibly +oo) closest to and no less than the infinitely precise result.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>RTP</computeroutput> <computeroutput>roundTowardPositive</computeroutput> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9ea529a841dde2e78d144c1814e3fc5ac60" prot="public">
          <name>RTZ</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Round towards zero. The result shall be the format’s floating-point number closest to and no greater in magnitude than the infinitely precise result.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>RTZ</computeroutput> <computeroutput>roundTowardZero</computeroutput> </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rounding mode for floating-point operations.</para>
<para>For some floating-point operations, infinitely precise results may not be representable in a given format. Hence, they are rounded modulo one of five rounding modes to a representable floating-point number.</para>
<para><verbatim>embed:rst:leading-asterisk
* The following rounding modes follow the SMT-LIB theory for floating-point
* arithmetic, which in turn is based on IEEE Standard 754 :cite:`IEEE754`.
* The rounding modes are specified in Sections 4.3.1 and 4.3.2 of the IEEE
* Standard 754.
* </verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" line="70" column="1" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" bodystart="71" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" prot="public" static="no" strong="yes">
        <type></type>
        <name>Kind</name>
        <qualifiedname>bitwuzla::Kind</qualifiedname>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca8d6b5cada83510220f59e00ce86d4d92" prot="public">
          <name>CONSTANT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>First order constant. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca0a0d89e2802bf5614a9e6e3531c563a6" prot="public">
          <name>CONST_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Constant array. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" prot="public">
          <name>VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Value. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae61ad9b2553a293b4a3f4d3b4fa5ab31" prot="public">
          <name>VARIABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bound variable. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca558ffc8f5770d8e4f95f51d822685532" prot="public">
          <name>AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean and.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>and</computeroutput> </para>
<para><bold>Number of arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="0">$Bool \times ... \times Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cabc80de8822d41a253a50099abd672477" prot="public">
          <name>DISTINCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disequality.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>distinct</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="1">$S \times ... \times S \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca969f331a87d8c958473c32b4d0e61a44" prot="public">
          <name>EQUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Equality.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>=</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="1">$S \times ... \times S \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac1cbcd58f852f8efa45845cf292e350c" prot="public">
          <name>IFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean if and only if.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>=</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="0">$Bool \times ... \times Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1e69ece8728dae84275e3f76b89d73db" prot="public">
          <name>IMPLIES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean implies.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>=&gt;</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="0">$Bool \times ... \times Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca10df3d67626099df882920ba6552f16d" prot="public">
          <name>NOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean not.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>not</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="2">$Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1d00e7dce692e8dc3f6877f035e3a616" prot="public">
          <name>OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean or.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>or</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="0">$Bool \times ... \times Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca97675eb3f268048604dc5155511a2a4d" prot="public">
          <name>XOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Boolean xor.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>xor</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="0">$Bool \times ... \times Bool \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac1cb5ee8f71d941fe8a121edb324101f" prot="public">
          <name>ITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If-then-else.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>ite</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="3">$Bool \times S  \times S \rightarrow S$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6a240802522e95fc9e2c1d09122d8ec4" prot="public">
          <name>EXISTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Existential quantification.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>exists</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="4">$S_1 \times ...  \times S_n \times Bool \rightarrow
 Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6e5a8a2e655574b65920ce0c5d2f0010" prot="public">
          <name>FORALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Universal quantification.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>forall</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="4">$S_1 \times ...  \times S_n \times Bool \rightarrow
 Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca2919bace3a09a7700313ddaa94bfada9" prot="public">
          <name>APPLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function application.</para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="5">$(S_1 \times ... \times S_n \rightarrow S) \times S_1
 \times ...  \times S_n \rightarrow S$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca64cd1dd4b2628444bae372942cc36e91" prot="public">
          <name>LAMBDA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Lambda.</para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="6">$S_1 \times ... \times S_n \times S \rightarrow (S_1
 \times ... \times S_n \rightarrow S)$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca2c543c370d60402f32b6854c17429f8d" prot="public">
          <name>ARRAY_SELECT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Array select.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>select</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="7">$(S_i \rightarrow S_e) \times S_i \rightarrow S_e$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca9c101cd89f872101b69a30c3c2bbaae4" prot="public">
          <name>ARRAY_STORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Array store.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>store</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="8">$(S_i \rightarrow S_e) \times S_i \times S_e \rightarrow
 (S_i \rightarrow S_e)$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6fc1778b31ccaba7b24b4da233d43f07" prot="public">
          <name>BV_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector addition.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvadd</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="9">$BV_n \times ... \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca470f951c16d4dfe3fd980f21a2a9a58c" prot="public">
          <name>BV_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector and.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvand</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="9">$BV_n \times ... \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cabd7fac5b1f108bfb6c6fb178b6e90527" prot="public">
          <name>BV_ASHR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector arithmetic right shift.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvashr</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cab4fb9aa0b26093801f2a898945576519" prot="public">
          <name>BV_COMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector comparison.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvcomp</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="11">$BV_n \times ... \times BV_n \rightarrow BV_1$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca47d7fdacb5a4cb77983672b99b91f189" prot="public">
          <name>BV_CONCAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector concat.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>concat</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="12">$BV_n \times ... \times BV_m \rightarrow BV_{n + ... +
 m}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae3ebda138f7152c00eee735d9f416a33" prot="public">
          <name>BV_DEC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector decrement.</para>
<para>Decrement by one.</para>
<para>Number of arguments: 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para>Create with:<itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caa56731f94963fb1013d1e31bdba4b9fd" prot="public">
          <name>BV_INC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector increment.</para>
<para>Increment by one.</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca2a6e0b161167f7a6945bab2247665baf" prot="public">
          <name>BV_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector multiplication.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvmul</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="9">$BV_n \times ... \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cab5990b5a2d2bd0ba41f3e804ac09bc0f" prot="public">
          <name>BV_NAND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector nand.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvnand</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca36f53c79c3ce0a324adfe50e1e16b2db" prot="public">
          <name>BV_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector negation (two&apos;s complement).</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvneg</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caaf2124c44c3d65d0ae1b260b3d996f2e" prot="public">
          <name>BV_NOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector nor.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvnor</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca9b68eeeeffc56636010f7708abe3aefd" prot="public">
          <name>BV_NOT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector not (one&apos;s complement).</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvnot</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1afe96380b344b267d1b21c8d610bffd" prot="public">
          <name>BV_OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector or.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvor</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="9">$BV_n \times ... \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caf3397586e9cf2ce7caeb7215e84df7ee" prot="public">
          <name>BV_REDAND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector and reduction.</para>
<para>Bit-wise <emphasis>and</emphasis> reduction), all bits are <emphasis>and</emphasis>&apos;ed together into a single bit. This corresponds to bit-wise <emphasis>and</emphasis> reduction as known from Verilog.</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="14">$BV_n \rightarrow BV_1$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca08a421b07fe7b2687e28526a4115bae6" prot="public">
          <name>BV_REDOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector reduce or.</para>
<para>Bit-wise <emphasis>or</emphasis> reduction), all bits are <emphasis>or</emphasis>&apos;ed together into a single bit. This corresponds to bit-wise <emphasis>or</emphasis> reduction as known from Verilog.</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="14">$BV_n \rightarrow BV_1$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6259ab3c195668adddbca4c60d628255" prot="public">
          <name>BV_REDXOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector reduce xor.</para>
<para>Bit-wise <emphasis>xor</emphasis> reduction), all bits are <emphasis>xor</emphasis>&apos;ed together into a single bit. This corresponds to bit-wise <emphasis>xor</emphasis> reduction as known from Verilog.</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="14">$BV_n \rightarrow BV_1$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cadfd06b2f2ea58759b1e07e9a8fff5fce" prot="public">
          <name>BV_ROL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector rotate left (not indexed).</para>
<para>This is a non-indexed variant of SMT-LIB <computeroutput>rotate_left</computeroutput>.</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1b07c50fb217786f463bb4d080580b07" prot="public">
          <name>BV_ROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector rotate right.</para>
<para>This is a non-indexed variant of SMT-LIB <computeroutput>rotate_right</computeroutput>.</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac515bd7ba9c36debaf1e29d2d164c021" prot="public">
          <name>BV_SADD_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed addition overflow test.</para>
<para>Predicate indicating if signed addition produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsaddo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca0443767dc22c96a6c2b8986c9119dfac" prot="public">
          <name>BV_SDIV_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed division overflow test.</para>
<para>Predicate indicating if signed division produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsdivo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca42428bc63f1950e8840bcecbd57cee60" prot="public">
          <name>BV_SDIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed division.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsdiv</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cacd99b3d70d5d9fcea1b33c0a9804ef39" prot="public">
          <name>BV_SGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed greater than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsle</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae33c37597fa5c0c063d7e6e287f29329" prot="public">
          <name>BV_SGT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed greater than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvslt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4b3ad5279d22a8d48e70b76aff430020" prot="public">
          <name>BV_SHL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector logical left shift.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvshl</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca25622ee2ea0d91ba9521d1be88ae7c4d" prot="public">
          <name>BV_SHR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector logical right shift.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvshr</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caac2b7b7ff0c61cf7204c369dc295bf9b" prot="public">
          <name>BV_SLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed less than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsle</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cafabd77c43faf006761489bdf9edaa00a" prot="public">
          <name>BV_SLT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed less than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvslt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cad0dc34b1610672e8935b3a1a2e8fe243" prot="public">
          <name>BV_SMOD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed modulo.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsmod</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca901a2cb3eedb7e37b1fd5bc4b80355d7" prot="public">
          <name>BV_SMUL_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed multiplication overflow test.</para>
<para>Predicate indicating if signed multiplication produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsmulo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca7bb758d1623d1322e42430d9fdd064ad" prot="public">
          <name>BV_SREM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed remainder.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsrem</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca7349e02cc4a3ad2d9a3cd1c5a8d1f669" prot="public">
          <name>BV_SSUB_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector signed subtraction overflow test.</para>
<para>Predicate indicatin if signed subtraction produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvssubo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae9474c0334b6694097d59b6b3a3cf385" prot="public">
          <name>BV_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector subtraction.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvsub</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6e88b96e404981d3c33c4d8e07615df5" prot="public">
          <name>BV_UADD_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned addition overflow test.</para>
<para>Predicate indicating if unsigned addition produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvuaddo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6e1c882f128cd69b7bb22c7a06241ac1" prot="public">
          <name>BV_UDIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned division.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvudiv</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca9eb0dc350c5b9d6293937afd1ac7847b" prot="public">
          <name>BV_UGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned greater than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvuge</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4eb3077afa33f7899e199709deb51aba" prot="public">
          <name>BV_UGT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned greater than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvugt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca3d3810bcc31e7d6c57d189c9a77ddca5" prot="public">
          <name>BV_ULE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned less than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvule</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caeb9a03b71e150aace7cf6bb3c08a19a9" prot="public">
          <name>BV_ULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned less than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvult</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4701b0009f298bb99cf0533fdedab5f6" prot="public">
          <name>BV_UMUL_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned multiplication overflow test.</para>
<para>Predicate indicating if unsigned multiplication produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvumulo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca701106866ba6c949faf29d2c4c16e685" prot="public">
          <name>BV_UREM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned remainder.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvurem</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca681c830f17bcf43bd31157b0242293dc" prot="public">
          <name>BV_USUB_OVERFLOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector unsigned subtraction overflow test.</para>
<para>Predicate indicating if unsigned subtraction produces an overflow.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvusubo</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="15">$BV_n \times BV_n \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca44b2e5b1be99c4b41d6fcabfd7c7dede" prot="public">
          <name>BV_XNOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector xnor.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvxnor</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="10">$BV_n \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca0a28b36709e2e2e563443e1dae8b6411" prot="public">
          <name>BV_XOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector xor.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>bvxor</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="9">$BV_n \times ... \times BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae2f0045efac2c0bbffec37dc2fffed32" prot="public">
          <name>BV_EXTRACT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector extract.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>extract</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 2 ( <formula id="16">$u$</formula>, <formula id="17">$l$</formula> with <formula id="18">$u \geq l$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="19">$BV_n \rightarrow BV_{u - l + 1}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae12e3154cd8ffe63fb229ee482762517" prot="public">
          <name>BV_REPEAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector repeat.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>repeat</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 1 ( <formula id="20">$i$</formula> s.t. <formula id="21">$i \cdot n$</formula> fits into <computeroutput>uint64_t</computeroutput>)</para>
<para><bold>Arguments:</bold> <formula id="22">$BV_n \rightarrow BV_{n * i}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac08110e9d888c7457b5ec7847293ca21" prot="public">
          <name>BV_ROLI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector rotate left by integer.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>rotate_left</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca52b7d01cbef86474f42ed992548605c8" prot="public">
          <name>BV_RORI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector rotate right by integer.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>rotate_right</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="13">$BV_n \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca837d5f6bec6ff5a270087665a487784f" prot="public">
          <name>BV_SIGN_EXTEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector sign extend.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>sign_extend</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 1 ( <formula id="20">$i$</formula> s.t. <formula id="23">$i + n$</formula> fits into <computeroutput>uint64_t</computeroutput>)</para>
<para><bold>Arguments:</bold> <formula id="24">$BV_n \rightarrow BV_{n + i}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae13594482af345c8c55eccec3c987f64" prot="public">
          <name>BV_ZERO_EXTEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Bit-vector zero extend.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>zero_extend</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 1 ( <formula id="20">$i$</formula> s.t. <formula id="23">$i + n$</formula> fits into <computeroutput>uint64_t</computeroutput>)</para>
<para><bold>Arguments:</bold> <formula id="24">$BV_n \rightarrow BV_{n + i}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca3d5a23a90c9ba49e81e6a5c447dcf0b0" prot="public">
          <name>FP_ABS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point absolute value.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.abs</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="25">$\mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca21c06ae7a323c956b972d389f43fb850" prot="public">
          <name>FP_ADD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point addition.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.add</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="26">$RM \times \mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca428f035d51521a5c9fa07e5c397b1d25" prot="public">
          <name>FP_DIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point division.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.div</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="26">$RM \times \mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cafc48a79b205db676e8d5ceafcc46b7ad" prot="public">
          <name>FP_EQUAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point equality.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.eq</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="27">$\mathit{FP}_{es} \times ... \times \mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca8d4b57bfeee462b404dfbd8ad6b29930" prot="public">
          <name>FP_FMA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point fused multiplcation and addition.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.fma</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 4</para>
<para><bold>Arguments:</bold> <formula id="28">$RM \times \mathit{FP}_{es} \times \mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca495d1ed64caa13170844fd7e473126b6" prot="public">
          <name>FP_FP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point IEEE 754 value.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="29">$BV_1 \times BV_e \times BV_{s-1} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1d85e49fe5f807a62813e54ff9089244" prot="public">
          <name>FP_GEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point greater than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.geq</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="27">$\mathit{FP}_{es} \times ... \times \mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cadf0c949d45b9662d1204ce807ba2d92b" prot="public">
          <name>FP_GT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point greater than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.gt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="27">$\mathit{FP}_{es} \times ... \times \mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae9d7869e7339627d8e3478c6c1250d25" prot="public">
          <name>FP_IS_INF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is infinity tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isInfinite</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1251e35fb975dc2d32fec0f6f090721b" prot="public">
          <name>FP_IS_NAN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is Nan tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isNaN</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac1e320c10f598b342c1a601fc9c1197a" prot="public">
          <name>FP_IS_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is negative tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isNegative</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca326db7d53c5406c360eeaff6cdb6c77e" prot="public">
          <name>FP_IS_NORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is normal tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isNormal</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caf19967abb2610f1cd2fd0d25ca7020ba" prot="public">
          <name>FP_IS_POS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is positive tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isPositive</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca44318c2a6afe50df45d435f6cd8d181d" prot="public">
          <name>FP_IS_SUBNORMAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is subnormal tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isSubnormal</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca2ec5309d64127027a57e2b80668fcb59" prot="public">
          <name>FP_IS_ZERO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point is zero tester.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.isZero</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae4734773861d76750b3c745d10e57220" prot="public">
          <name>FP_LEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point less than or equal.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.leq</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="27">$\mathit{FP}_{es} \times ... \times \mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1fe14198a928f0b52cc152ba89e51694" prot="public">
          <name>FP_LT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point less than.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.lt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> <computeroutput>&gt;=</computeroutput> 2</para>
<para><bold>Arguments:</bold> <formula id="30">$\mathit{FP}_{es} \rightarrow Bool$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca2e38920c6b0f577c81906d8deae2e80b" prot="public">
          <name>FP_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point max.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.max</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="31">$\mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca6719d5599ea6657da3292b2176a92a76" prot="public">
          <name>FP_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point min.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.min</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="31">$\mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4c7e74ed042a427b76667613bdd6197b" prot="public">
          <name>FP_MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point multiplcation.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.mul</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="26">$RM \times \mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4139ef53581cfaa00363ee1485bc878e" prot="public">
          <name>FP_NEG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point negation.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.neg</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Arguments:</bold> <formula id="25">$\mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac9e93590b6c8eb78f97be5f61ef4a026" prot="public">
          <name>FP_REM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point remainder.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.rem</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="31">$\mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca89cb48657c102e45474107af0772ba14" prot="public">
          <name>FP_RTI</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point round to integral.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.roundToIntegral</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="32">$RM \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cabfacfd21b1c4d95d36c264d2e99046da" prot="public">
          <name>FP_SQRT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point square root.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.sqrt</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Arguments:</bold> <formula id="32">$RM \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cabe948a40c1abf92568e9bb8516f26818" prot="public">
          <name>FP_SUB</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point subtraction.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.sub</computeroutput> </para>
<para><bold>Number of Arguments:</bold> 3</para>
<para><bold>Arguments:</bold> <formula id="26">$RM \times \mathit{FP}_{es} \times \mathit{FP}_{es} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term3()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca4370a7a9c8ad1edab126dae8b52262df" prot="public">
          <name>FP_TO_FP_FROM_BV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_fp from IEEE 754 bit-vector.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>to_fp</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 1</para>
<para><bold>Number of Indices:</bold> 2 ( <formula id="33">$e$</formula>, <formula id="34">$s$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="35">$BV_n \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term1_indexed2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cac8984c9a30ac867285f1fb1c0cbb7d5d" prot="public">
          <name>FP_TO_FP_FROM_FP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_fp from floating-point.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>to_fp</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Number of Indices:</bold> 2 ( <formula id="33">$e$</formula>, <formula id="34">$s$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="36">$RM \times \mathit{FP}_{e&apos;s&apos;} \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2_indexed2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca769f5e0887bd31e4ca47224fe292e9ab" prot="public">
          <name>FP_TO_FP_FROM_SBV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_fp from signed bit-vector value.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>to_fp</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Number of Indices:</bold> 2 ( <formula id="33">$e$</formula>, <formula id="34">$s$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="37">$RM \times BV_n \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2_indexed2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca1a4938eba923b19e9eca87dd45539cb3" prot="public">
          <name>FP_TO_FP_FROM_UBV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_fp from unsigned bit-vector value.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>to_fp_unsigned</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Number of Indices:</bold> 2 ( <formula id="33">$e$</formula>, <formula id="34">$s$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="37">$RM \times BV_n \rightarrow \mathit{FP}_{es}$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2_indexed2()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca9f5cfe9b3d7d10e17650a7ce3a54890c" prot="public">
          <name>FP_TO_SBV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_sbv.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.to_sbv</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Number of Indices:</bold> 1 ( <formula id="38">$n$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="39">$RM \times \mathit{FP}_{es} \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cafe2d986de75c57ba16cf45965c36c380" prot="public">
          <name>FP_TO_UBV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating-point to_ubv.</para>
<para><bold>SMT-LIB:</bold> <computeroutput>fp.to_ubv</computeroutput> (indexed)</para>
<para><bold>Number of Arguments:</bold> 2</para>
<para><bold>Number of Indices:</bold> 1 ( <formula id="38">$n$</formula>)</para>
<para><bold>Arguments:</bold> <formula id="39">$RM \times \mathit{FP}_{es} \rightarrow BV_n$</formula></para>
<para><bold>Create with:</bold><itemizedlist>
<listitem><para><bold>C</bold><itemizedlist>
<listitem><para><computeroutput>bitwuzla_mk_term2_indexed1()</computeroutput></para>
</listitem><listitem><para><computeroutput>bitwuzla_mk_term()</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><bold>C++</bold><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" kindref="member">bitwuzla::mk_term()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The term kind. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" line="137" column="1" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/enums.h" bodystart="138" bodyend="1748"/>
      </memberdef>
      <memberdef kind="enum" id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186c" prot="public" static="no" strong="yes">
        <type></type>
        <name>Option</name>
        <qualifiedname>bitwuzla::Option</qualifiedname>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca5048fdbe2a2b837df1853cf489f67c79" prot="public">
          <name>LOGLEVEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Log level.</bold></para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value. [<bold>default</bold>: 0] </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca774ed7dd04f5529097c71c370400f400" prot="public">
          <name>PRODUCE_MODELS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Model generation.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable, generate model for assertions only</para>
</listitem><listitem><para><bold>2</bold>: enable, generate model for all created terms</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>This option cannot be enabled in combination with option <computeroutput><ref refid="enums_8h_1a8f41c0c7caad09e429617fc016a216e8" kindref="member">EVALUE</ref>(PP_UNCONSTRAINED_OPTIMIZATION</computeroutput>. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca927ef50820a381ad5bd51e74e2ec0d56" prot="public">
          <name>PRODUCE_UNSAT_ASSUMPTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Unsat assumptions generation.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>] </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca42e86322b1c02730b3d46d3ac7e7b764" prot="public">
          <name>PRODUCE_UNSAT_CORES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Unsat core generation.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>] </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186caace01ee43fda36bd62efc12035e693f6" prot="public">
          <name>SEED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Seed for random number generator.</bold></para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value. [<bold>default</bold>: 0] </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca47a219833a4b3a09240896c88b2b1969" prot="public">
          <name>VERBOSITY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Verbosity level.</bold></para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value &lt;= 4. [<bold>default</bold>: 0] </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186caa10a53425daf124d689a61c6c89725bd" prot="public">
          <name>BV_SOLVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Configure the bit-vector solver engine.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>bitblast</bold>: The classical bit-blasting approach. [<bold>default</bold>]</para>
</listitem><listitem><para><bold>prop</bold>: Propagation-based local search (sat only).</para>
</listitem><listitem><para><bold>preprop</bold>: Sequential portfolio combination of bit-blasting and propagation-based local search. </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca96418388056c40211e08154f7a57b968" prot="public">
          <name>REWRITE_LEVEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Rewrite level.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>0</bold>: no rewriting</para>
</listitem><listitem><para><bold>1</bold>: term level rewriting</para>
</listitem><listitem><para><bold>2</bold>: term level rewriting and basic preprocessing</para>
</listitem><listitem><para><bold>3</bold>: term level rewriting and full preprocessing [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Configuring the rewrite level after terms have been created is not allowed.</para>
</simplesect>
<simplesect kind="warning"><para>This is an expert option to configure rewriting. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca515be110f1f5292a65b352304a3830f9" prot="public">
          <name>SAT_SOLVER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Configure the SAT solver engine.</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>cadical</bold>: <ulink url="https://github.com/arminbiere/cadical">CaDiCaL</ulink> [<bold>default</bold>]</para>
</listitem><listitem><para><bold>cms</bold>: <ulink url="https://github.com/msoos/cryptominisat">CryptoMiniSat</ulink></para>
</listitem><listitem><para><bold>gimsatul</bold>: <ulink url="https://github.com/arminbiere/gimsatul">Gimsatul</ulink></para>
</listitem><listitem><para><bold>kissat</bold>: <ulink url="https://github.com/arminbiere/kissat">Kissat</ulink></para>
</listitem><listitem><para><bold>lingeling</bold>: <ulink url="https://github.com/arminbiere/lingeling">Lingeling</ulink> </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca5d2a93bb2ff3b4d482dc7689faae9e2a" prot="public">
          <name>SMT_COMP_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Enable SMT-COMP mode.</bold></para>
<para>Parser only option. Only effective when an SMT2 input file is parsed.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cabe6a4cc7d4b56805103d31dbefbfcd6e" prot="public">
          <name>PROP_CONST_BITS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Constant bits.</bold></para>
<para>Configure constant bit propagation (requries bit-blasting to AIG).</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186caced9db19fa1257dab49a847db2e4cde9" prot="public">
          <name>PROP_INFER_INEQ_BOUNDS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Infer bounds for inequalities for value computation.</bold></para>
<para>When enabled, infer bounds for value computation for inequalities based on satisfied top level inequalities.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca83063674e672d8e78b083f4dfa408ffb" prot="public">
          <name>PROP_NPROPS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Number of propagations.</bold></para>
<para>Configure the number of propagations used as a limit for the propagation-based local search solver engine. No limit if 0.</para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value. [<bold>default</bold>: 0]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca36b1a60b980f5c533aa8a6dbef09a48c" prot="public">
          <name>PROP_NUPDATES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Number of updates.</bold></para>
<para>Configure the number of model value updates used as a limit for the propagation-based local search solver engine. No limit if 0.</para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value. [<bold>default</bold>: 0]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca63c7a811c00ff00d9f5a237cabf2543b" prot="public">
          <name>PROP_PATH_SEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Path selection.</bold></para>
<para>Configure mode for path selection.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>essential</bold>: Select path based on essential inputs. [default]</para>
</listitem><listitem><para><bold>random</bold>: Select path randomly.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca87c6bdf684cee3eb743a8abfa9ed61a7" prot="public">
          <name>PROP_PROB_RANDOM_INPUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Probability for selecting random input.</bold></para>
<para>Configure the probability with which to select a random input instead of an essential input when selecting the path.</para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value &lt;= 1000 (= 100%). [<bold>default</bold>: 0]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cabfa15c20c18066f7610cf3d8a51c032f" prot="public">
          <name>PROP_PROB_USE_INV_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Probability for inverse values.</bold></para>
<para>Configure the probability with which to choose an inverse value over a consistent value when aninverse value exists.</para>
<para>Values:<itemizedlist>
<listitem><para>An unsigned integer value &lt;= 1000 (= 100%). [<bold>default</bold>: 990]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cac2b947f70328a297b870c138e4ad835f" prot="public">
          <name>PROP_SEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Value computation for sign extension.</bold></para>
<para>When enabled, detect sign extension operations (are rewritten on construction) and use value computation for sign extension.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca4bf56e2165830ba1465aed3bdaf72898" prot="public">
          <name>PROP_NORMALIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Propagation-based local search solver engine: Local search specific normalization.</bold></para>
<para>When enabled, perform normalizations for local search, on the local search layer (does not affect node layer).</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable</para>
</listitem><listitem><para><bold>0</bold>: disable [<bold>default</bold>]</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This is an expert option to configure the prop solver engine. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cad36ca94e75c11d2653c1e71bcb93710b" prot="public">
          <name>PREPROCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing</bold></para>
<para>When enabled, applies all enabled preprocessing passes.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca1c1c4b2437c7952b55e5e2877a75f4fd" prot="public">
          <name>PP_CONTRADICTING_ANDS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Find contradicting bit-vector ands</bold></para>
<para>When enabled, substitutes contradicting nodes of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca470f951c16d4dfe3fd980f21a2a9a58c" kindref="member">BV_AND</ref> with zero.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca1d0d73e16af622f85896f6c07df5bc34" prot="public">
          <name>PP_ELIM_BV_EXTRACTS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Eliminate bit-vector extracts on bit-vector constants</bold></para>
<para>When enabled, eliminates bit-vector extracts on constants.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca37991ae5aee10bd7e0fa016150cf6a64" prot="public">
          <name>PP_EMBEDDED_CONSTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Embedded constraint substitution</bold></para>
<para>When enabled, substitutes assertions that occur as sub-expression in the formula with their respective Boolean value.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cadc7ff13bb74ca1c49e0564abf923e3d2" prot="public">
          <name>PP_FLATTEN_AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: AND flattening</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca84a8ad14719834487fd8fbee802215eb" prot="public">
          <name>PP_NORMALIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Normalization</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca7d0099ba97cb317010098d251b0baf3a" prot="public">
          <name>PP_NORMALIZE_SHARE_AWARE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Normalization: Enable share awareness normlization</bold></para>
<para>When enabled, this disables normalizations that may yield blow-up on the bit-level.</para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca0a6cc51a63c36639ea1769670675f969" prot="public">
          <name>PP_SKELETON_PREPROC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Boolean skeleton preprocessing</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cac44b65f5b4b5d31b10ca8b5fe954bbc1" prot="public">
          <name>PP_VARIABLE_SUBST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Variable substitution</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca1302e26f0b37334e5c554325a2fad3d1" prot="public">
          <name>PP_VARIABLE_SUBST_NORM_EQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Variable substitution: Equality Normalization</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186caa10eb86e7de63c768bde672ecfd292c1" prot="public">
          <name>PP_VARIABLE_SUBST_NORM_DISEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Variable substitution: Disequality Normalization</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca2089c6d88dbe832e98a05e815bdf0188" prot="public">
          <name>PP_VARIABLE_SUBST_NORM_BV_INEQ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><bold>Preprocessing: Variable substitution: Bit-Vector Inequality Normalization</bold></para>
<para>Values:<itemizedlist>
<listitem><para><bold>1</bold>: enable [<bold>default</bold>]</para>
</listitem><listitem><para><bold>0</bold>: disable </para>
</listitem></itemizedlist>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca8d8b44fad62581c9ffeeaf68ebe62dc3" prot="public">
          <name>DBG_RW_NODE_THRESH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>**Debug: Threshold for number of new nodes introduced for recursive call of rewrite(). **</para>
<para>Prints a warning number of newly introduced nodes is above threshold.</para>
<para><simplesect kind="warning"><para>This is an expert debug option. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186ca10f37c69dfa6cd94b4faac917351a255" prot="public">
          <name>DBG_PP_NODE_THRESH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>**Debug: Threshold for formula size increase after preprocessing in percent. **</para>
<para>Prints a warning if formula size increase is above threshold.</para>
<para><simplesect kind="warning"><para>This is an expert debug option. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cab18b82c70b05c19150feec3faa69e579" prot="public">
          <name>DBG_CHECK_MODEL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>**Debug: Check models for each satisfiable query. **</para>
<para><simplesect kind="warning"><para>This is an expert debug option. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacebitwuzla_1a886dae78d57a9d8eca547b783873186cab981bb691bf2411da3eaf4e90d9789ad" prot="public">
          <name>DBG_CHECK_UNSAT_CORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>**Debug: Check unsat core for each unsatisfiable query. **</para>
<para><simplesect kind="warning"><para>This is an expert debug option. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The configuration options supported by <ref refid="classbitwuzla_1_1Bitwuzla" kindref="compound">Bitwuzla</ref>.</para>
<para><ref refid="classbitwuzla_1_1Options" kindref="compound">Options</ref> that list string values can be configured via <computeroutput>bitwuzla_set_option_str</computeroutput>. <ref refid="classbitwuzla_1_1Options" kindref="compound">Options</ref> with integer configuration values are configured via <computeroutput>bitwuzla_set_option</computeroutput>.</para>
<para>For all options, the current configuration value can be queried via <computeroutput>bitwuzla_get_option</computeroutput>. <ref refid="classbitwuzla_1_1Options" kindref="compound">Options</ref> with string configuration values internally represent these values as enum values. For these options, <computeroutput>bitwuzla_get_opiton</computeroutput> will return such an enum value. Use <computeroutput>bitwuzla_get_option_str</computeroutput> to query enum options for the corresponding string representation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/option.h" line="44" column="1" bodyfile="/home/ma/git/bitwuzla/include/bitwuzla/option.h" bodystart="45" bodyend="388"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp__libinfo_1ga51ebf4c81f12c7ec820aeb4be7d882a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bitwuzla::copyright</definition>
        <argsstring>()</argsstring>
        <name>copyright</name>
        <qualifiedname>bitwuzla::copyright</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get copyright information. <simplesect kind="return"><para>A string with the copyright information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="90" column="12" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="90" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__libinfo_1gaa53a283252260381679c9af07297a37b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bitwuzla::version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <qualifiedname>bitwuzla::version</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get version information. <simplesect kind="return"><para>A string with the version information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="95" column="12" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="95" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__libinfo_1ga7698d8855e13957976d228c9313d9253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bitwuzla::git_id</definition>
        <argsstring>()</argsstring>
        <name>git_id</name>
        <qualifiedname>bitwuzla::git_id</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get git information. <simplesect kind="return"><para>A string with the git information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="100" column="12" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="100" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a0fe3d4a29f473ecc8b444822ef8595d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; bitwuzla::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Result result)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacebitwuzla_1a018bfacb13e4ee2c0d26e1804a404afa" kindref="member">Result</ref></type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print result to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The result. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="338" column="1" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="338" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1aead3243a3ce97843875c90bed0265952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; bitwuzla::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, Kind kind)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print kind to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>The kind. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="352" column="1" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="352" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1abb69f6c39d14a28055a8135740b91ae7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; bitwuzla::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, RoundingMode rm)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" kindref="member">RoundingMode</ref></type>
          <declname>rm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print rounding mode to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="366" column="1" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="366" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a060a46f2f6000339a619e63466bfd45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::operator==</definition>
        <argsstring>(const Term &amp;a, const Term &amp;b)</argsstring>
        <name>operator==</name>
        <qualifiedname>bitwuzla::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical equality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given terms are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="726" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="726" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a013e530a79f292727a322ca518bd4c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::operator!=</definition>
        <argsstring>(const Term &amp;a, const Term &amp;b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>bitwuzla::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical disequality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first term. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given terms are disequal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="735" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="735" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a6695c75a7bdce3a63a4994deaec6c7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; bitwuzla::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Term &amp;term)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print term to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The term. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="743" column="1" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="743" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a4ba0c24855c35ade9d9eabd19ebf7c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::operator==</definition>
        <argsstring>(const Sort &amp;a, const Sort &amp;b)</argsstring>
        <name>operator==</name>
        <qualifiedname>bitwuzla::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical equality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first sort. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given sorts are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="944" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="944" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a841e511f8f36d5c4ca14dffb910110a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool bitwuzla::operator!=</definition>
        <argsstring>(const Sort &amp;a, const Sort &amp;b)</argsstring>
        <name>operator!=</name>
        <qualifiedname>bitwuzla::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syntactical disequality operator.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first sort. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the given sorts are disequal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="953" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="953" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacebitwuzla_1a67bb5a7e549af92a48b54d169225e3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; bitwuzla::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;out, const Sort &amp;sort)</argsstring>
        <name>operator&lt;&lt;</name>
        <qualifiedname>bitwuzla::operator&lt;&lt;</qualifiedname>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print sort to output stream. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output stream. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output stream. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="961" column="1" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="961" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1gacb1c94b05a3181ab3797461db1e0101c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_array_sort</definition>
        <argsstring>(const Sort &amp;index, const Sort &amp;element)</argsstring>
        <name>mk_array_sort</name>
        <qualifiedname>bitwuzla::mk_array_sort</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an array sort. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index sort of the array sort. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>element</parametername>
</parameternamelist>
<parameterdescription>
<para>The element sort of the array sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An array sort which maps sort <computeroutput>index</computeroutput> to sort <computeroutput>element</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a5053644e2c55124772be5608434dcd0d" kindref="member">Sort::is_array()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput>Sort::array_get_index()</computeroutput></para>
</listitem><listitem><para><computeroutput>Sort::array_get_element()</computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1201" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1201" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1ga7bcc9c149fc0adfa1adb1ff4628fae0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_bool_sort</definition>
        <argsstring>()</argsstring>
        <name>mk_bool_sort</name>
        <qualifiedname>bitwuzla::mk_bool_sort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a Boolean sort. <simplesect kind="return"><para>A Boolean sort. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1207" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1207" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_bv_sort</definition>
        <argsstring>(uint64_t size)</argsstring>
        <name>mk_bv_sort</name>
        <qualifiedname>bitwuzla::mk_bv_sort</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector sort of given size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the bit-vector sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bit-vector sort of given size.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a40020deea906cc3d5d3ba68455fecb0d" kindref="member">Sort::is_bv()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a5b31d07e9aad31a5b12d6d6ab0e23596" kindref="member">Sort::bv_size()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1218" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1218" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_fp_sort</definition>
        <argsstring>(uint64_t exp_size, uint64_t sig_size)</argsstring>
        <name>mk_fp_sort</name>
        <qualifiedname>bitwuzla::mk_fp_sort</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>exp_size</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>sig_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point sort of given exponent and significand size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the exponent. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the significand (including sign bit). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating-point sort of given format.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a4df38c43b17972bd890cc7aed86d1a94" kindref="member">Sort::is_fp()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1ac50225d7851be8aa7656caed0a6e650c" kindref="member">Sort::fp_exp_size()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a87691e57f73024f1ba4bbe7aa88f0f31" kindref="member">Sort::fp_sig_size()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1231" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1231" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1gacccceb1252cbd32e2bb1600de5651b12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_fun_sort</definition>
        <argsstring>(const std::vector&lt; Sort &gt; &amp;domain, const Sort &amp;codomain)</argsstring>
        <name>mk_fun_sort</name>
        <qualifiedname>bitwuzla::mk_fun_sort</qualifiedname>
        <param>
          <type>const std::vector&lt; <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &gt; &amp;</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>codomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a function sort. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>domain</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain sorts (the sorts of the arguments). The number of sorts in this vector must match <computeroutput>arity</computeroutput>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codomain</parametername>
</parameternamelist>
<parameterdescription>
<para>The codomain sort (the sort of the return value). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A function sort of given domain and codomain sorts.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a94f8916e0b6635e9405f8346b90a0a74" kindref="member">Sort::is_fun()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1ad9f4109e31ec0dba4019bde19e7d4261" kindref="member">Sort::fun_arity()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput>Sort::fun_domain_sorts()</computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1a9c7533502e3d1afdc1632f0712a57a92" kindref="member">Sort::fun_codomain()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1246" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1246" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1ga86aa84200669f4ea6101efce53653b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_rm_sort</definition>
        <argsstring>()</argsstring>
        <name>mk_rm_sort</name>
        <qualifiedname>bitwuzla::mk_rm_sort</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a Roundingmode sort. <simplesect kind="return"><para>A Roundingmode sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1af1ce6186dac747fc78cb9fe78f3a62f4" kindref="member">Sort::is_rm()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1254" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1254" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__sort__creation_1ga7c032cef692b18294022faa531b9e1b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref></type>
        <definition>Sort bitwuzla::mk_uninterpreted_sort</definition>
        <argsstring>(std::optional&lt; const std::string &gt; symbol=std::nullopt)</argsstring>
        <name>mk_uninterpreted_sort</name>
        <qualifiedname>bitwuzla::mk_uninterpreted_sort</qualifiedname>
        <param>
          <type>std::optional&lt; const std::string &gt;</type>
          <declname>symbol</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an uninterpreted sort.</para>
<para><simplesect kind="note"><para>Only 0-arity uninterpreted sorts are supported.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the sort. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An uninterpreted sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="classbitwuzla_1_1Sort_1aa6464ab9f30e220a79427551614f7246" kindref="member">Sort::is_uninterpreted()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1267" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1267" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga902572f98c22861ec1ceb64d454ae335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_true</definition>
        <argsstring>()</argsstring>
        <name>mk_true</name>
        <qualifiedname>bitwuzla::mk_true</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a true value. <simplesect kind="return"><para>A term representing true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1284" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1284" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1gaab3ce23bc5eb7edb0a6069fbe508dbd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_false</definition>
        <argsstring>()</argsstring>
        <name>mk_false</name>
        <qualifiedname>bitwuzla::mk_false</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a false value. <simplesect kind="return"><para>A term representing false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1290" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1290" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga182c486f7632e2013059400459412fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_zero</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_bv_zero</name>
        <qualifiedname>bitwuzla::mk_bv_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value zero. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value 0 of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1300" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1300" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga5478a12d384c325cbbb13fd8cbde0a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_one</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_bv_one</name>
        <qualifiedname>bitwuzla::mk_bv_one</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value 1 of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1310" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1310" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga910d5b918ee7e69288c3721da48791ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_ones</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_bv_ones</name>
        <qualifiedname>bitwuzla::mk_bv_ones</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value where all bits are set to 1. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where all bits are set to 1. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1320" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1320" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga4a59e3bafa6cd9f52a4a65758ad95052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_min_signed</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_bv_min_signed</name>
        <qualifiedname>bitwuzla::mk_bv_min_signed</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector minimum signed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where the MSB is set to 1 and all remaining bits are set to 0. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1330" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1330" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga45fd6a4fba7bac9d28c0ea1d511138e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_max_signed</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_bv_max_signed</name>
        <qualifiedname>bitwuzla::mk_bv_max_signed</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector maximum signed value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the bit-vector value of given sort where the MSB is set to 0 and all remaining bits are set to 1. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1340" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1340" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga2d2afbe1e27516eaaa1dd47809dd7098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_value</definition>
        <argsstring>(const Sort &amp;sort, const std::string &amp;value, uint8_t base=2)</argsstring>
        <name>mk_bv_value</name>
        <qualifiedname>bitwuzla::mk_bv_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>base</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its string representation.</para>
<para>Parameter <computeroutput>base</computeroutput> determines the base of the string representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>A string representing the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base in which the string is given; <computeroutput>2</computeroutput> for binary, <computeroutput>10</computeroutput> for decimal, and <computeroutput>16</computeroutput> for hexadecimal.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1359" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga80b3bd6d331e9e12df6971924447ac76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_value_uint64</definition>
        <argsstring>(const Sort &amp;sort, uint64_t value)</argsstring>
        <name>mk_bv_value_uint64</name>
        <qualifiedname>bitwuzla::mk_bv_value_uint64</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its unsigned integer representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsigned integer representation of the bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1375" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1375" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga0b5e7662789c679d1bd2ca1c569e7598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_bv_value_int64</definition>
        <argsstring>(const Sort &amp;sort, int64_t value)</argsstring>
        <name>mk_bv_value_int64</name>
        <qualifiedname>bitwuzla::mk_bv_value_int64</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a bit-vector value from its signed integer representation.</para>
<para><simplesect kind="note"><para>Given value must fit into a bit-vector of given size (sort).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The unsigned integer representation of the bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the bit-vector value of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1391" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1391" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1gae0da5b9c302f271096e15105de4646ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_pos_zero</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_fp_pos_zero</name>
        <qualifiedname>bitwuzla::mk_fp_pos_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point positive zero value (SMT-LIB: <computeroutput>+zero</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point positive zero value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1401" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1401" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga7f4521eb01475b4a2d4f41e4519a0b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_neg_zero</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_fp_neg_zero</name>
        <qualifiedname>bitwuzla::mk_fp_neg_zero</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point negative zero value (SMT-LIB: <computeroutput>-zero</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point negative zero value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1411" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1411" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1gae20bc19e3c5852973a1736db0f3ffb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_pos_inf</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_fp_pos_inf</name>
        <qualifiedname>bitwuzla::mk_fp_pos_inf</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point positive infinity value (SMT-LIB: <computeroutput>+oo</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point positive infinity value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1421" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1421" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1gae8c1a802a61223522ebccd324c6cb084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_neg_inf</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_fp_neg_inf</name>
        <qualifiedname>bitwuzla::mk_fp_neg_inf</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point negative infinity value (SMT-LIB: <computeroutput>-oo</computeroutput>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point negative infinity value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1431" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1431" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga13bec6d23d799a2868e875cd7d53d266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_nan</definition>
        <argsstring>(const Sort &amp;sort)</argsstring>
        <name>mk_fp_nan</name>
        <qualifiedname>bitwuzla::mk_fp_nan</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point NaN value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing the floating-point NaN value of given floating-point sort. </para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1441" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1441" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga1f132666bc60445c6de534ce4edd7a9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_value</definition>
        <argsstring>(const Term &amp;bv_sign, const Term &amp;bv_exponent, const Term &amp;bv_significand)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>bv_sign</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>bv_exponent</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>bv_significand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its IEEE 754 standard representation given as three bit-vector values representing the sign bit, the exponent and the significand.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bv_sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The sign bit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bv_exponent</parametername>
</parameternamelist>
<parameterdescription>
<para>The exponent bit-vector value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bv_significand</parametername>
</parameternamelist>
<parameterdescription>
<para>The significand bit-vector value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the floating-point value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1454" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1454" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga6c03776ba4d3027608db3c129e76b2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_value</definition>
        <argsstring>(const Sort &amp;sort, const Term &amp;rm, const std::string &amp;real)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>rm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>real</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its real representation, given as a decimal string, with respect to given rounding mode.</para>
<para><simplesect kind="note"><para>Given rounding mode may be an arbitrary, non-value rounding mode term. If it is a value, the returned term will be a floating-point value, else a non-value floating-point term.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>real</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing a real value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating-point representation of the given real string. If <computeroutput>rm</computeroutput> is of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref> the floating-point will be of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, else it will be a non-value term.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1477" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1477" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga76318f9908943e1d22829a315cff2e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_fp_value</definition>
        <argsstring>(const Sort &amp;sort, const Term &amp;rm, const std::string &amp;num, const std::string &amp;den)</argsstring>
        <name>mk_fp_value</name>
        <qualifiedname>bitwuzla::mk_fp_value</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>rm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>den</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating-point value from its rational representation, given as a two decimal strings representing the numerator and denominator, with respect to given rounding mode.</para>
<para><simplesect kind="note"><para>Given rounding mode may be an arbitrary, non-value rounding mode term. If it is a value, the returned term will be a floating-point value, else a non-value floating-point term.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing the numerator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>den</parametername>
</parameternamelist>
<parameterdescription>
<para>The decimal string representing the denominator.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A floating-point representation of the given rational string. If <computeroutput>rm</computeroutput> is of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref> the floating-point will be of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, else it will be a non-value term.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1500" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1500" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga7eeb452aecbc3eb2f226e5d4f6542987" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_const_array</definition>
        <argsstring>(const Sort &amp;sort, const Term &amp;term)</argsstring>
        <name>mk_const_array</name>
        <qualifiedname>bitwuzla::mk_const_array</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a one-dimensional constant array of given sort, initialized with given value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the array. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The term to initialize the elements of the array with.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca0a0d89e2802bf5614a9e6e3531c563a6" kindref="member">Kind::CONST_ARRAY</ref>, representing a constant array of given sort.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacb1c94b05a3181ab3797461db1e0101c" kindref="member">mk_array_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1518" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1518" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1gae73ff6d9f3f6fe02614addf7ae800624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_rm_value</definition>
        <argsstring>(RoundingMode rm)</argsstring>
        <name>mk_rm_value</name>
        <qualifiedname>bitwuzla::mk_rm_value</qualifiedname>
        <param>
          <type><ref refid="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" kindref="member">RoundingMode</ref></type>
          <declname>rm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a rounding mode value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rm</parametername>
</parameternamelist>
<parameterdescription>
<para>The rounding mode value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of kind <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4caecc2e9c313faddb07e7da223c1dc5c3f" kindref="member">Kind::VALUE</ref>, representing the rounding mode value.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="namespacebitwuzla_1ac6b3ac798df483963364f0302612ed9e" kindref="member">RoundingMode</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1528" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1528" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga86c3e3625eb88816202d24c874c2f737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_term</definition>
        <argsstring>(Kind kind, const std::vector&lt; Term &gt; &amp;args, const std::vector&lt; uint64_t &gt; &amp;indices={})</argsstring>
        <name>mk_term</name>
        <qualifiedname>bitwuzla::mk_term</qualifiedname>
        <param>
          <type><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></type>
          <declname>kind</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt; &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint64_t &gt; &amp;</type>
          <declname>indices</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a term of given kind with the given argument terms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kind</parametername>
</parameternamelist>
<parameterdescription>
<para>The operator kind. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>The indices of this term, empty if not indexed.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term representing an operation of given kind.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4c" kindref="member">Kind</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1542" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1542" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga737adf241e82d1876f28a32d6bb4f973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_const</definition>
        <argsstring>(const Sort &amp;sort, std::optional&lt; const std::string &gt; symbol=std::nullopt)</argsstring>
        <name>mk_const</name>
        <qualifiedname>bitwuzla::mk_const</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>std::optional&lt; const std::string &gt;</type>
          <declname>symbol</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a (first-order) constant of given sort with given symbol.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the constant. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the constant.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4ca8d6b5cada83510220f59e00ce86d4d92" kindref="member">Kind::CONSTANT</ref>, representing the constant.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacb1c94b05a3181ab3797461db1e0101c" kindref="member">mk_array_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga7bcc9c149fc0adfa1adb1ff4628fae0b" kindref="member">mk_bool_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacccceb1252cbd32e2bb1600de5651b12" kindref="member">mk_fun_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga86aa84200669f4ea6101efce53653b55" kindref="member">mk_rm_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1562" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1562" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__creation_1ga4a1a72d493b85392b0b47c8b5ed2c2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::mk_var</definition>
        <argsstring>(const Sort &amp;sort, std::optional&lt; const std::string &gt; symbol=std::nullopt)</argsstring>
        <name>mk_var</name>
        <qualifiedname>bitwuzla::mk_var</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Sort" kindref="compound">Sort</ref> &amp;</type>
          <declname>sort</declname>
        </param>
        <param>
          <type>std::optional&lt; const std::string &gt;</type>
          <declname>symbol</declname>
          <defval>std::nullopt</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a variable of given sort with given symbol.</para>
<para><simplesect kind="note"><para>This creates a variable to be bound by quantifiers or lambdas.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sort</parametername>
</parameternamelist>
<parameterdescription>
<para>The sort of the variable. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the variable.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A term of <ref refid="namespacebitwuzla_1aacab907529465556d9a6035fc7c62f4cae61ad9b2553a293b4a3f4d3b4fa5ab31" kindref="member">Kind::VARIABLE</ref>, representing the variable.</para>
</simplesect>
<simplesect kind="see"><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga7bcc9c149fc0adfa1adb1ff4628fae0b" kindref="member">mk_bool_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gab19c95c55b4150e7cc010c66b3dca9d7" kindref="member">mk_bv_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga9e112a033b5250f84d870985f111eb9b" kindref="member">mk_fp_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1gacccceb1252cbd32e2bb1600de5651b12" kindref="member">mk_fun_sort()</ref></computeroutput></para>
</listitem><listitem><para><computeroutput><ref refid="group__cpp__sort__creation_1ga86aa84200669f4ea6101efce53653b55" kindref="member">mk_rm_sort()</ref></computeroutput> </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1582" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1582" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__substitution_1gaa9a95b567380e18b16be86b940e800f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref></type>
        <definition>Term bitwuzla::substitute_term</definition>
        <argsstring>(const Term &amp;term, const std::unordered_map&lt; Term, Term &gt; map)</argsstring>
        <name>substitute_term</name>
        <qualifiedname>bitwuzla::substitute_term</qualifiedname>
        <param>
          <type>const <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &amp;</type>
          <declname>term</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref>, <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitute a set of keys with their corresponding values in the given term.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>The term in which the keys are to be substituted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para>The substitution map. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The resulting term from this substitution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1603" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1603" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp__term__substitution_1ga93a89648b6b0190d468abaa392896628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bitwuzla::substitute_terms</definition>
        <argsstring>(std::vector&lt; Term &gt; &amp;terms, const std::unordered_map&lt; Term, Term &gt; map)</argsstring>
        <name>substitute_terms</name>
        <qualifiedname>bitwuzla::substitute_terms</qualifiedname>
        <param>
          <type>std::vector&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt; &amp;</type>
          <declname>terms</declname>
        </param>
        <param>
          <type>const std::unordered_map&lt; <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref>, <ref refid="classbitwuzla_1_1Term" kindref="compound">Term</ref> &gt;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitute a set of keys with their corresponding values in the set of given terms.</para>
<para>The terms in <computeroutput>terms</computeroutput> are replaced with the terms resulting from this substitutions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>terms_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the set of terms. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>terms</parametername>
</parameternamelist>
<parameterdescription>
<para>The terms in which the keys are to be substituted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the substitution map. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>The keys. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map_values</parametername>
</parameternamelist>
<parameterdescription>
<para>The mapped values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="1619" column="6" declfile="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" declline="1619" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ma/git/bitwuzla/include/bitwuzla/cpp/bitwuzla.h" line="41" column="1"/>
  </compounddef>
</doxygen>
